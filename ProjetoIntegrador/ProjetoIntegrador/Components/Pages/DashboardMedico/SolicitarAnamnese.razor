@page "/dash-medico/solicitarAnamnese"
@attribute [Authorize(Roles = "Medico,Administrador")]

@using ProjetoIntegrador.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjetoIntegrador.Data
@using Microsoft.AspNetCore.Authorization


@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

@rendermode InteractiveServer

<div class="container-lg py-4 px-3">
    <h2 class="text-center fw-bold mb-5">
        <i class="bi bi-clipboard-heart me-2 text-primary"></i>
        Anamnese do Paciente
    </h2>

    <EditForm Model="anamneseInput" OnValidSubmit="FinalizarAnamneseAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label fw-semibold">Selecione a Consulta</label>
            <select class="form-select" @onchange="OnConsultaSelecionadaChanged">
                <option value="">-- Selecione --</option>
                @foreach (var consulta in consultasDoDia)
                {
                    <option value="@consulta.Id">
                        @($"{consulta.Paciente?.Nome} - {consulta.DataHora:dd/MM/yyyy HH:mm}")
                    </option>
                }
            </select>
        </div>

        @if (consultaSelecionada != null)
        {
            <div class="mb-3">
                <label class="form-label">Paciente</label>
                <input class="form-control" value="@consultaSelecionada.Paciente?.Nome" disabled />
            </div>

            <div class="mb-3">
                <label class="form-label">Médico</label>
                <input class="form-control" value="@consultaSelecionada.Medico?.Nome" disabled />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Queixa Principal</label>
                <InputTextArea class="form-control" @bind-Value="anamneseInput.QueixaPrincipal" rows="3" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">História da Doença Atual</label>
                <InputTextArea class="form-control" @bind-Value="anamneseInput.HistoriaDoencaAtual" rows="3" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Histórico Médico</label>
                <InputTextArea class="form-control" @bind-Value="anamneseInput.HistoricoMedico" rows="3" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Alergias / Uso de Medicamentos</label>
                <InputTextArea class="form-control" @bind-Value="anamneseInput.AlergiasEMedicamentos" rows="3" />
            </div>

            <div class="text-end">
                <button class="btn btn-primary px-4" type="submit">
                    <i class="bi bi-check-circle me-2"></i>Salvar Anamnese
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(mensagem))
        {
            <div class="alert alert-success mt-4">@mensagem</div>
        }
    </EditForm>
</div>

@code {
    private string? consultaSelecionadaId;
    private Agendamento? consultaSelecionada;
    private List<Agendamento> consultasDoDia = new();
    private string? idMedicoLogado;
    private string? mensagem;

    // Estrutura de input que será salva como Anamnese
    private Anamnese anamneseInput = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        idMedicoLogado = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        var todasConfirmadas = await DbContext.Agendamentos
            .Include(a => a.Paciente)
            .Include(a => a.Medico)
            .Where(a => a.IdMedico == idMedicoLogado && a.Status == "Confirmado")
            .ToListAsync();

        var hoje = DateTime.Today;
        var amanha = hoje.AddDays(1);

        consultasDoDia = todasConfirmadas
            .Where(c => c.DataHora >= hoje && c.DataHora < amanha)
            .ToList();
    }

    private async Task OnConsultaSelecionadaChanged(ChangeEventArgs e)
    {
        consultaSelecionadaId = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(consultaSelecionadaId))
        {
            consultaSelecionada = await DbContext.Agendamentos
                .Include(a => a.Paciente)
                .Include(a => a.Medico)
                .FirstOrDefaultAsync(a => a.Id == consultaSelecionadaId);
        }
        else
        {
            consultaSelecionada = null;
        }

        StateHasChanged();
    }

    private async Task FinalizarAnamneseAsync()
    {
        if (consultaSelecionada is null) return;

        var novaAnamnese = new Anamnese
            {
                Id = Guid.NewGuid().ToString(),
                IdAgendamento = consultaSelecionada.Id,
                QueixaPrincipal = anamneseInput.QueixaPrincipal,
                HistoriaDoencaAtual = anamneseInput.HistoriaDoencaAtual,
                HistoricoMedico = anamneseInput.HistoricoMedico,
                AlergiasEMedicamentos = anamneseInput.AlergiasEMedicamentos,
                DataCriacao = DateTime.Now
            };

        DbContext.Anamneses.Add(novaAnamnese);
        await DbContext.SaveChangesAsync();

        mensagem = "Anamnese registrada com sucesso!";
        anamneseInput = new();
        consultaSelecionada = null;
        consultaSelecionadaId = null;

        await OnInitializedAsync(); // atualiza a lista
    }
}
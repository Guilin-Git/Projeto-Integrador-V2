@page "/dash-medico/gerarRelatorio"

@using ProjetoIntegrador.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjetoIntegrador.Data
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

@rendermode InteractiveServer
@attribute [Authorize(Roles = "Medico,Administrador")]

<div class="container-lg py-4 px-3">
    <h2 class="text-center fw-bold mb-5">
        <i class="bi bi-clipboard-plus me-2 text-primary"></i>
        Relatório Médico da Consulta
    </h2>

    <EditForm Model="relatorio" OnValidSubmit="FinalizarRelatorioAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label fw-semibold">Selecione a Consulta</label>
            <select class="form-select" @onchange="OnConsultaSelecionadaChanged">
                <option value="">-- Selecione --</option>
                @foreach (var consulta in consultasDoDia)
                {
                    <option value="@consulta.Id">
                        @($"{consulta.Paciente?.Nome} - {consulta.DataHora:dd/MM/yyyy HH:mm}")
                    </option>
                }
            </select>
        </div>

        @if (consultaSelecionada != null)
        {
            <div class="mb-3">
                <label class="form-label">Paciente</label>
                <input class="form-control" value="@consultaSelecionada.Paciente?.Nome" disabled />
            </div>

            <div class="mb-3">
                <label class="form-label">Médico</label>
                <input class="form-control" value="@consultaSelecionada.Medico?.Nome" disabled />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Diagnóstico</label>
                <InputTextArea class="form-control" @bind-Value="relatorio.Diagnostico" rows="3" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Prescrição Médica</label>
                <InputTextArea class="form-control" @bind-Value="relatorio.Prescricao" rows="3" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Observações Clínicas</label>
                <InputTextArea class="form-control" @bind-Value="relatorio.Observacoes" rows="3" />
            </div>

            <div class="text-end">
                <button class="btn btn-primary px-4" type="submit">
                    <i class="bi bi-check-circle me-2"></i>Finalizar Relatório
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(mensagem))
        {
            <div class="alert alert-success mt-4">@mensagem</div>
        }
    </EditForm>
</div>

@code {
    private string? consultaSelecionadaId;
    private Agendamento? consultaSelecionada;
    private List<Agendamento> consultasDoDia = new();
    private string? idMedicoLogado;
    private string? mensagem;

    private Relatorio relatorio = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        idMedicoLogado = authState.User.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        var todasConsultasConfirmadas = await DbContext.Agendamentos
            .Include(a => a.Paciente)
            .Include(a => a.Medico)
            .Where(a =>
                a.IdMedico == idMedicoLogado &&
                a.Status == "Confirmado")
            .ToListAsync();

        var hoje = DateTime.Today;
        var amanha = hoje.AddDays(1);

        consultasDoDia = todasConsultasConfirmadas
            .Where(c => c.DataHora >= hoje && c.DataHora < amanha)
            .ToList();
    }

    private async Task FinalizarRelatorioAsync()
    {
        if (string.IsNullOrWhiteSpace(consultaSelecionadaId)) return;

        var consulta = await DbContext.Agendamentos
            .Include(a => a.Paciente)
            .Include(a => a.Medico)
            .FirstOrDefaultAsync(a => a.Id == consultaSelecionadaId);

        if (consulta is null || consulta.Status != "Confirmado") return;

        // Preenche os dados do relatório real
        relatorio.Id = Guid.NewGuid().ToString();
        relatorio.IdAgendamento = consulta.Id;
        relatorio.IdMedico = consulta.IdMedico;
        relatorio.IdPaciente = consulta.IdPaciente;
        relatorio.DataGeracao = DateTime.Now;

        DbContext.Relatorios.Add(relatorio);

        consulta.Status = "Realizada";
        await DbContext.SaveChangesAsync();

        mensagem = "Relatório gerado e consulta marcada como realizada.";
        consultaSelecionada = null;
        consultaSelecionadaId = null;
        relatorio = new();
        await OnInitializedAsync();
        StateHasChanged();
    }


    private async Task OnConsultaSelecionadaChanged(ChangeEventArgs e)
    {
        consultaSelecionadaId = e.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(consultaSelecionadaId))
        {
            consultaSelecionada = await DbContext.Agendamentos
                .Include(a => a.Paciente)
                .Include(a => a.Medico)
                .FirstOrDefaultAsync(a => a.Id == consultaSelecionadaId);
        }
        else
        {
            consultaSelecionada = null;
        }

        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(consultaSelecionadaId))
        {
            await OnConsultaSelecionadaChanged(new ChangeEventArgs { Value = consultaSelecionadaId });
        }
    }
}

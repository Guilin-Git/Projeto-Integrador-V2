@page "/dash-paciente/consultas"
@attribute [Authorize(Roles = "Paciente,Administrador")]

@using ProjetoIntegrador.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjetoIntegrador.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="container-lg px-4 py-4">
    <h2 class="fw-semibold text-center mb-5">
        <i class="bi bi-journal-medical me-2 text-primary"></i>
        Minhas Consultas
    </h2>

    @if (agendamentos is null)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Carregando…</span>
            </div>
        </div>
    }
    else if (!agendamentos.Any())
    {
        <section class="hero-blank rounded-4 shadow-sm">
            <p class="fs-4 fw-medium mb-0">
                Você ainda não possui consultas agendadas.
            </p>
        </section>
    }
    else
    {
        <div class="row g-4">
            @foreach (var a in agendamentos)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <article class="card h-100 border-0 shadow rounded-4">
                        <div class="card-body">
                            <h5 class="card-title text-primary mb-3">
                                🩺 Dr(a). @a.Medico?.Nome
                            </h5>

                            <p class="mb-2">
                                <i class="bi bi-calendar3 me-2 text-secondary"></i>
                                <strong>Data:</strong>
                                @a.DataHora.ToString("dd/MM/yyyy 'às' HH:mm")
                            </p>

                            <p class="mb-2">
                                <i class="bi bi-info-circle me-2 text-secondary"></i>
                                <strong>Status:</strong>
                                <span class="badge rounded-pill @GetStatusClass(a.Status)">
                                    @a.Status
                                </span>
                            </p>

                            @if (a.Status?.ToLower() == "realizada" &&
                                 (relatorios.ContainsKey(a.Id) || anamneses.ContainsKey(a.Id)))
                            {
                                <button class="btn btn-outline-primary mt-3"
                                        @onclick="@(() => AbrirModalDetalhes(a.Id))">
                                    Ver Detalhes
                                </button>
                            }
                        </div>
                    </article>
                </div>
            }
        </div>
    }

    @if (agendamentoSelecionado != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content border-0 rounded-4 shadow">
                    <div class="modal-header">
                        <h5 class="modal-title">Detalhes da Consulta</h5>
                        <button type="button" class="btn-close" @onclick="FecharModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (relatorios.TryGetValue(agendamentoSelecionado.Id, out var relatorio))
                        {
                            <hr />
                            <h6>Relatório Médico</h6>
                            <p><strong>Diagnóstico Clínico</strong><br />@relatorio.Diagnostico</p>
                            <p><strong>Prescrição Médica</strong><br />@relatorio.Prescricao</p>
                            <p><strong>Observações Clínicas</strong><br />@relatorio.Observacoes</p>
                        }


                        @if (anamneses.TryGetValue(agendamentoSelecionado.Id, out var anamnese))
                        {
                            <hr />
                            <h6>Anamnese</h6>
                            <p><strong>Queixa Principal:</strong><br />@anamnese.QueixaPrincipal</p>
                            <p><strong>Histórico Médico:</strong><br />@anamnese.HistoricoMedico</p>
                            <p><strong>História da Doença Atual:</strong><br />@anamnese.HistoriaDoencaAtual</p>
                            <p><strong>Alergias e Medicamentos:</strong><br />@anamnese.AlergiasEMedicamentos</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="FecharModal">Fechar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Agendamento>? agendamentos;
    private Dictionary<string, Relatorio> relatorios = new();
    private Dictionary<string, Anamnese> anamneses = new();
    private Agendamento? agendamentoSelecionado;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (uid is null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        agendamentos = await DbContext.Agendamentos
            .Include(a => a.Medico)
            .Where(a => a.IdPaciente == uid)
            .OrderByDescending(a => a.DataHora)
            .ToListAsync();

        var agendamentoIds = agendamentos.Select(a => a.Id).ToList();

        relatorios = await DbContext.Relatorios
            .Where(r => agendamentoIds.Contains(r.IdAgendamento))
            .ToDictionaryAsync(r => r.IdAgendamento);

        anamneses = await DbContext.Anamneses
            .Where(a => agendamentoIds.Contains(a.IdAgendamento))
            .ToDictionaryAsync(a => a.IdAgendamento);
    }

    private void AbrirModalDetalhes(string agendamentoId)
    {
        agendamentoSelecionado = agendamentos?.FirstOrDefault(a => a.Id == agendamentoId);
    }

    private void FecharModal()
    {
        agendamentoSelecionado = null;
    }

    private static string GetStatusClass(string? s) => s?.ToLower() switch
    {
        "confirmado" => "bg-success text-white",
        "cancelado" => "bg-danger text-white",
        "agendado" => "bg-warning text-dark",
        "realizada" => "bg-primary text-white",
        _ => "bg-secondary text-white"
    };
}

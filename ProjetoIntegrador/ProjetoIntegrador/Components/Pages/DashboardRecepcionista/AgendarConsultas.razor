@page "/dash-recepcionista/agendarConsultas"
@attribute [Authorize(Roles = "Recepcionista")]
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using Microsoft.EntityFrameworkCore
@using ProjetoIntegrador.Models
@using ProjetoIntegrador.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization


<h3 class="mb-4">📅 Agendar ou Remarcar Consulta</h3>

<EditForm Model="agendamento" OnValidSubmit="SalvarAgendamento">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Paciente</label>
        <InputSelect class="form-select" @bind-Value="agendamento.IdPaciente">
            <option value="">Selecione um paciente</option>
            @foreach (var paciente in pacientes)
            {
                <option value="@paciente.Id">@paciente.Nome</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Médico</label>
        <InputSelect class="form-select" @bind-Value="agendamento.IdMedico">
            <option value="">Selecione um médico</option>
            @foreach (var medico in medicos)
            {
                <option value="@medico.Id">@medico.Nome</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Data e Hora</label>
        <InputDate class="form-control" @bind-Value="agendamento.DataHora" />
    </div>

    <div class="mb-3">
        <label class="form-label">Status</label>
        <InputSelect class="form-select" @bind-Value="agendamento.Status">
            <option value="Agendado">Agendado</option>
            <option value="Confirmado">Confirmado</option>
            <option value="Cancelado">Cancelado</option>
        </InputSelect>
    </div>

    <button class="btn btn-success" type="submit">Salvar Consulta</button>
</EditForm>

@if (!string.IsNullOrEmpty(mensagem))
{
    <div class="alert alert-success mt-3">@mensagem</div>
}

@code {
    private Agendamento agendamento = new();
    private List<Usuario> pacientes = new();
    private List<Usuario> medicos = new();
    private string mensagem;

    protected override async Task OnInitializedAsync()
    {
        var roleMedicoId = await DbContext.Roles
            .Where(r => r.Name == "Medico")
            .Select(r => r.Id)
            .FirstOrDefaultAsync();

        var rolePacienteId = await DbContext.Roles
            .Where(r => r.Name == "Paciente")
            .Select(r => r.Id)
            .FirstOrDefaultAsync();

        medicos = await DbContext.Users
            .Where(u => DbContext.UserRoles.Any(r => r.UserId == u.Id && r.RoleId == roleMedicoId))
            .ToListAsync();

        pacientes = await DbContext.Users
            .Where(u => DbContext.UserRoles.Any(r => r.UserId == u.Id && r.RoleId == rolePacienteId))
            .ToListAsync();
    }

    private async Task SalvarAgendamento()
    {
        agendamento.Id = Guid.NewGuid().ToString();
        DbContext.Agendamentos.Add(agendamento);
        await DbContext.SaveChangesAsync();

        mensagem = "Consulta agendada com sucesso!";
        agendamento = new(); // limpa o formulário
    }
}

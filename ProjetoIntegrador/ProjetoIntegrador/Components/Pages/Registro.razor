@page "/register"
@using ProjetoIntegrador.Models
@inject NavigationManager Navigation
@using ProjetoIntegrador.Services
@inject AuthService AuthService

<EditForm Model="usuario" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Nome -->
    <div class="form-group">
        <label for="nome">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="usuario.Nome" />
    </div>

    <!-- Email -->
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="usuario.Email" />
    </div>

    <!-- Senha -->
    <div class="form-group">
        <label for="senha">Senha</label>
        <InputPassword id="senha" class="form-control" @bind="usuario.Senha" />
    </div>

    <!-- CPF -->
    <div class="form-group">
        <label for="cpf">CPF</label>
        <InputText id="cpf" class="form-control" @bind-Value="usuario.CPF" />
    </div>
     
    <!-- Telefone -->
    <div class="form-group">
        <label for="telefone">Telefone</label>
        <InputText id="telefone" class="form-control" @bind-Value="usuario.Telefone" />
    </div>

    <!-- Endereço -->
    <div class="form-group">
        <label for="endereco">Endereço</label>
        <InputText id="endereco" class="form-control" @bind-Value="usuario.Endereco" />
    </div>

    <button class="btn btn-primary" type="submit">Registrar</button>
</EditForm>

@if (registrationFailed)
{
    <div class="alert alert-danger mt-3">
        Erro ao registrar usuário. Tente novamente.
    </div>
}

@code {
    private Usuario usuario = new Usuario();
    private bool registrationFailed = false;

    private async Task HandleRegister()
    {
        var isRegistered = await AuthService.Register(usuario);
        if (isRegistered)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            registrationFailed = true;
        }
    }
}
